name: Deploy backend pipeline
on:
  workflow_dispatch:
    inputs:
      variant:
        description: 'Variant language for deployment'
        required: true
        type: choice
        options:
          - rap
          - arn
      environment:
        description: 'Environment for deployment'
        required: true
        type: choice
        options:
          - STAGING
          - PRODUCTION
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: |
          pre-commit run --all-files

  pytest:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      REGION: 'us-central1'
      INSTANCE_NAME_TEST: ${{ secrets.INSTANCE_NAME_TEST }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 416.0.0'
      - name: Install Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
      - name: Start Cloud SQL Proxy
        # the tailing & allows the proxy to run in the background so subsequent action steps can run
        run: ./cloud_sql_proxy -instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.INSTANCE_NAME_TEST }}=tcp:5432 &
      - name: 'Create env file'
        working-directory: Backend/translatorapp_v2/
        run: |
          echo "${{ vars.ENV_FILE_TEST }}" > .env
          echo "APP_RAW_INFERENCE_MODEL=${{ vars.RAW_INFERENCE_MODEL_NAME }}" >> .env
      - name: Install dependencies
        working-directory: Backend/translatorapp_v2/
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
      - name: Run pytest
        working-directory: Backend/translatorapp_v2/
        run: |
          pytest

  build-push-gcp:
    name: Build and Push to GCP
    needs: [pytest, pre-commit]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        SERVICE_REGION: ${{ vars.SERVICE_REGION }}
        DB_REGION: ${{ vars.DB_REGION }}
        MODEL_REGION: ${{ vars.MODEL_REGION }}
        ARTIFACT_REGION: ${{ vars.ARTIFACT_REGION }}
        INSTANCE_NAME: ${{ secrets.DB_INSTANCE_NAME }}
        REP_NAME: native-translator
        IMAGE_NAME: ${{ vars.IMAGE_NAME_BACKEND }}
        DB_HOST: ${{ secrets.DB_HOST }}
        VPC_NAME: ${{ vars.VPC_NAME }}
        SUBNET_NAME: ${{ vars.BACKEND_SUBNET }}
        ENV_FILE_BACK: ${{ secrets.ENV_FILE_BACK }}
        PORT: 8000
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    steps:
      - name: Set variant from dispatch event or branch
        id: set-variant
        run: |
          if [ ! -z "${{ github.event.inputs.variant }}" ]; then
            echo "variant=${{ github.event.inputs.variant }}" >> $GITHUB_OUTPUT
          else
            # Extract variant from branch name (e.g., main-rap -> rap)
            VARIANT=$(echo $BRANCH | rev | cut -d'-' -f1 | rev)
            if [[ "$VARIANT" != "rap" && "$VARIANT" != "arn" ]]; then
              echo "Invalid variant: $VARIANT. Must be one of: rap, arn"
              exit 1
            else
              echo "variant=$VARIANT" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Check out code
        uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 416.0.0'
      - name: 'Create env file'
        working-directory: Backend/translatorapp_v2/
        run: echo "${{ env.ENV_FILE_BACK }}" > .env

      - name: Build Docker Image
        working-directory: Backend/translatorapp_v2/
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Configure Docker Client # aunthenticate to rep
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ env.ARTIFACT_REGION }}-docker.pkg.dev --quiet

      - name: Push Docker Image to Artifact Registry
        run: |-
          ARTIFACT_REGISTRY_URL=${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REP_NAME }}/${{ steps.set-variant.outputs.variant }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Artifact Registry URL: $ARTIFACT_REGISTRY_URL"
          echo "ARTIFACT_REGISTRY_URL=$ARTIFACT_REGISTRY_URL" >> $GITHUB_ENV
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ARTIFACT_REGISTRY_URL
          docker push $ARTIFACT_REGISTRY_URL

      - name: Get Cloud Run Service URLs
        id: get-urls
        run: |
          echo "Service Region: ${{ env.SERVICE_REGION }}"
          echo "Region: ${{ env.ARTIFACT_REGION }}"
          SERVICE_NAME_INFERENCE=${{ vars.SERVICE_NAME_INFERENCE }}-${{ steps.set-variant.outputs.variant }}
          SERVICE_NAME_RAW_INFERENCE=${{ vars.SERVICE_NAME_RAW_INFERENCE }}
          echo "Service Name Inference: $SERVICE_NAME_INFERENCE"
          echo "Service Name Raw Inference: $SERVICE_NAME_RAW_INFERENCE"
          INFERENCE_URL=$(gcloud run services describe $SERVICE_NAME_INFERENCE --platform managed --region ${{ env.MODEL_REGION }} --format 'value(status.url)')
          RAW_INFERENCE_URL=$(gcloud run services describe $SERVICE_NAME_RAW_INFERENCE --platform managed --region ${{ env.MODEL_REGION }} --format 'value(status.url)')
          if [[ "${{ github.event.inputs.environment }}" == "PRODUCTION" ]]; then
            if [[ "${{ steps.set-variant.outputs.variant }}" == "rap" ]]; then
              # in production, both urls are the same
              FRONTEND_URL=${{ vars.URL_RAP }}
              BACKEND_URL=${{ vars.URL_RAP }}
            else
              FRONTEND_URL=${{ vars.URL_ARN }}
              BACKEND_URL=${{ vars.URL_ARN }}
            fi
          else
            SERVICE_NAME_BACKEND=${{ vars.SERVICE_NAME_BACKEND }}-${{ steps.set-variant.outputs.variant }}
            SERVICE_NAME_FRONTEND=${{ vars.SERVICE_NAME_FRONTEND }}-${{ steps.set-variant.outputs.variant }}
            # in staging, frontend url is the backend url
            BACKEND_URL=$(gcloud run services describe $SERVICE_NAME_BACKEND --platform managed --region ${{ env.SERVICE_REGION }} --format 'value(status.url)')
            FRONTEND_URL=$(gcloud run services describe $SERVICE_NAME_FRONTEND --platform managed --region ${{ env.SERVICE_REGION }} --format 'value(status.url)')
          fi
          echo "Inference URL: $INFERENCE_URL"
          echo "Raw Inference URL: $RAW_INFERENCE_URL"
          echo "Frontend URL: $FRONTEND_URL"
          echo "Backend URL: $BACKEND_URL"
          echo "INFERENCE_URL=$INFERENCE_URL" >> $GITHUB_ENV
          echo "RAW_INFERENCE_URL=$RAW_INFERENCE_URL" >> $GITHUB_ENV
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

      - name: Deploy to cloud run
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ vars.SERVICE_NAME_BACKEND }}-${{ steps.set-variant.outputs.variant }}'
          image: ${{ env.ARTIFACT_REGISTRY_URL }}
          env_vars: |-
            SECRET_KEY=${{ env.DJANGO_SECRET_KEY }}
            PRODUCTION=True
            VARIANT=${{ steps.set-variant.outputs.variant }}
            DB_HOST=${{ env.DB_HOST }}
            APP_FRONTEND_URL=${{ env.FRONTEND_URL }}
            APP_BACKEND_URL=${{ env.BACKEND_URL }}
            DB_NAME=${{ steps.set-variant.outputs.variant }}
            INVITATION_GUIDE_URL=${{ env.FRONTEND_URL }}
            INSTANCE_CONNECTION_NAME=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.INSTANCE_NAME }}
            APP_INFERENCE_MODEL_NAME=${{ vars.INFERENCE_MODEL_NAME }}-${{ steps.set-variant.outputs.variant }}
            APP_RAW_INFERENCE_MODEL_NAME=${{ vars.RAW_INFERENCE_MODEL_NAME }}
            APP_INFERENCE_MODEL_URL=${{ env.INFERENCE_URL }}
            APP_RAW_INFERENCE_MODEL_URL=${{ env.RAW_INFERENCE_URL }}
          region: '${{ env.SERVICE_REGION }}'
          project_id: '${{ env.PROJECT_ID }}'
          timeout: '5m'
          flags: '--set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.DB_REGION }}:${{ env.INSTANCE_NAME }} --network=${{ env.VPC_NAME }} --subnet=${{ env.SUBNET_NAME }} --vpc-egress=all-traffic --port=${{ env.PORT }}'
